{"version":3,"file":"static/js/24.0cdb3b7b.chunk.js","mappings":"+QASMA,EAAKC,IAAAA,KCRX,CAAgB,cAAc,6BAA6B,QAAU,yBAAyB,KAAO,sBAAsB,UAAY,2BAA2B,KAAO,sBAAsB,KAAO,sBAAsB,KAAO,sBAAsB,aAAa,4BAA4B,mBAAmB,kCAAkC,WAAW,0BAA0B,gBAAgB,iCD+D5Y,EArDgB,WACZ,IAAQC,GAAcC,EAAAA,EAAAA,MAAdD,UAER,GAA8BE,EAAAA,EAAAA,YAAU,eAAjCC,EAAO,KAAEC,EAAU,KAU1B,OAPAC,EAAAA,EAAAA,YAAU,YACN,uBAAC,yGACqBC,EAAAA,EAAmBN,GAAW,KAAD,EAAzCO,EAAG,OACTH,EAAWG,GAAK,0CAFpB,EAIJ,GAAG,CAACP,KAGA,8BACKG,IACG,iBAAKK,UAAWV,EAAG,WAAW,WAC1B,gBAAKU,UAAWV,EAAG,eAAgBW,MAAO,CAAEC,gBAAgB,OAAD,OAASP,EAAQQ,WAAU,SAEtF,iBAAKH,UAAWV,EAAG,WAAW,WAC1B,iBAAKU,UAAWV,EAAG,QAAQ,WACvB,gBAAKc,IAAKT,EAAQU,UAAWC,IAAKX,EAAQY,MAAOP,UAAWV,EAAG,gBAC/D,iBAAKU,UAAWV,EAAG,QAAQ,WACvB,gBAAIU,UAAWV,EAAG,QAAQ,UACrBK,EAAQY,MACRZ,EAAQa,OACL,iBAAMR,UAAWV,EAAG,QAAQ,UACxB,SAAC,KAAQ,CAACmB,MAAM,SAASC,OAAO,iBAI5C,gBAAKV,UAAWV,EAAG,cAAc,SAAEK,EAAQgB,aAC3C,iBAAKX,UAAWV,EAAG,oBAAoB,WAClCsB,EAAAA,EAAAA,GAAYjB,EAAQkB,iBAAiB,yBAKlD,iBAAKb,UAAWV,EAAG,aAAa,WAC5B,mBAAQwB,KAAK,SAASd,UAAWV,EAAG,YAAY,SAAC,UAGjD,mBAAQwB,KAAK,SAASd,UAAWV,EAAG,iBAAiB,SAAC,wBASlF,C,yFE5DayB,EAAG,yCAAG,WAAOvB,GAAS,uGACbwB,EAAAA,EAAAA,GAAM,CACpBC,OAAQ,MACRC,IAAK,iDACLC,OAAQ,CACJC,KAAM,sCACNC,WAAY,EACZC,GAAI9B,EACJ+B,IAAK,6CAMV,KAAD,EAuBF,OApCMxB,EAAG,OAeHyB,EAAOzB,EAAIyB,KAAKC,MAAM,GACtBC,EAAUF,EAAKE,QACfC,EAAaH,EAAKG,WAClBC,EAAmBJ,EAAKI,kBAGxBC,EAAS,CAAC,GAETxB,UAAYqB,EAAQI,WAAWC,QAAQb,IAC9CW,EAAOtB,MAAQmB,EAAQnB,MACvBsB,EAAOlB,UAAYe,EAAQf,UAE3BkB,EAAOG,sBAAwBL,EAAWK,sBAC1CH,EAAOhB,gBAAkBc,EAAWd,gBACpCgB,EAAOI,WAAaN,EAAWM,WAC/BJ,EAAOK,UAAYP,EAAWO,UAE9BL,EAAOrB,KAAOmB,EAAWd,gBAAkB,IAE3CgB,EAAO1B,WAAayB,EAAiBO,MAAMC,kBAE3C,kBAEOP,GAAM,4CAChB,gBAxCe,qC,qBCFhB,IAAMQ,EAAS,CACX,CACIC,QAAS,IACTC,OAAQ,KAEZ,CACID,QAAS,IACTC,OAAQ,KAEZ,CACID,QAAS,IACTC,OAAQ,MAsBhB,IAlBA,SAAqBC,GACjB,IAAK,IAAIC,EAAQJ,EAAOK,OAAS,EAAGD,GAAS,EAAGA,IAC5C,GAAID,EAAQH,EAAOI,GAAOH,QAAS,CAC/B,IAAIK,EAAWH,EAAQH,EAAOI,GAAOH,QAQrC,OALIK,EADAA,EAAW,GACAC,KAAKC,MAAiB,GAAXF,GAAiB,GAE5BC,KAAKC,MAAMF,IAGVG,WAAaT,EAAOI,GAAOF,MAC/C,CAGJ,OAAOC,EAAMM,UACjB,C","sources":["pages/Channel/Channel.js","webpack://youtube-clone/./src/pages/Channel/Channel.module.scss?bbac","services/channelService.js","utils/intToString.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport styles from './Channel.module.scss';\r\nimport * as channelService from '~/services/channelService';\r\nimport { TickIcon } from '~/components/Icons/Icons';\r\nimport intToString from '~/utils/intToString';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nconst Channel = () => {\r\n    const { channelId } = useParams();\r\n\r\n    const [channel, setChannel] = useState();\r\n\r\n    // Get channel\r\n    useEffect(() => {\r\n        (async () => {\r\n            const res = await channelService.get(channelId);\r\n            setChannel(res);\r\n        })();\r\n    }, [channelId]);\r\n\r\n    return (\r\n        <>\r\n            {channel && (\r\n                <div className={cx('wrapper')}>\r\n                    <div className={cx('cover-image')} style={{ backgroundImage: `url(${channel.coverImage})` }}></div>\r\n\r\n                    <div className={cx('channel')}>\r\n                        <div className={cx('base')}>\r\n                            <img src={channel.thumbnail} alt={channel.title} className={cx('thumbnail')} />\r\n                            <div className={cx('info')}>\r\n                                <h2 className={cx('name')}>\r\n                                    {channel.title}\r\n                                    {channel.tick && (\r\n                                        <span className={cx('tick')}>\r\n                                            <TickIcon width=\"1.4rem\" height=\"1.4rem\" />\r\n                                        </span>\r\n                                    )}\r\n                                </h2>\r\n                                <div className={cx('custom-url')}>{channel.customUrl}</div>\r\n                                <div className={cx('subscriber-count')}>\r\n                                    {intToString(channel.subscriberCount)} subscribers\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className={cx('subscribe')}>\r\n                            <button type=\"button\" className={cx('join-btn')}>\r\n                                Join\r\n                            </button>\r\n                            <button type=\"button\" className={cx('subscribe-btn')}>\r\n                                Subscribe\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Channel;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"cover-image\":\"Channel_cover-image__E6USC\",\"channel\":\"Channel_channel__jHRBB\",\"base\":\"Channel_base__olQlh\",\"thumbnail\":\"Channel_thumbnail__dW+FG\",\"info\":\"Channel_info__-DpTu\",\"name\":\"Channel_name__BsI+W\",\"tick\":\"Channel_tick__C2BZA\",\"custom-url\":\"Channel_custom-url__p5KRk\",\"subscriber-count\":\"Channel_subscriber-count__PtMN2\",\"join-btn\":\"Channel_join-btn__xjKlz\",\"subscribe-btn\":\"Channel_subscribe-btn__hq9CX\"};","import axios from 'axios';\r\n\r\nexport const get = async (channelId) => {\r\n    const res = await axios({\r\n        method: 'GET',\r\n        url: 'https://www.googleapis.com/youtube/v3/channels',\r\n        params: {\r\n            part: 'snippet,statistics,brandingSettings',\r\n            maxResults: 1,\r\n            id: channelId,\r\n            key: 'AIzaSyA7VA0F-Cub1vsxig1eHAwZCL2kuEpJ-og',\r\n            // key: 'AIzaSyCMylU-9JSqd2vovIC5HRbm_AZyx710WbQ',\r\n            // key: 'AIzaSyCkE39Mg6XPAFYprzto4wo7rjNL9Jxsr5w',\r\n            // key: 'AIzaSyAWwuKzvNwpe3QEN2nHu2MrTLIQvZqvRkc',\r\n            // key: 'AIzaSyB-kSJpQ3NugeVslBfmdRq5kJySv4ykPSM',\r\n        },\r\n    });\r\n\r\n    const data = res.data.items[0];\r\n    const snippet = data.snippet;\r\n    const statistics = data.statistics;\r\n    const brandingSettings = data.brandingSettings;\r\n    // const contentDetails = data.contentDetails;\r\n\r\n    const result = {};\r\n\r\n    result.thumbnail = snippet.thumbnails.default.url;\r\n    result.title = snippet.title;\r\n    result.customUrl = snippet.customUrl;\r\n\r\n    result.hiddenSubscriberCount = statistics.hiddenSubscriberCount;\r\n    result.subscriberCount = statistics.subscriberCount;\r\n    result.videoCount = statistics.videoCount;\r\n    result.viewCount = statistics.viewCount;\r\n\r\n    result.tick = statistics.subscriberCount > 100000 ? true : false;\r\n\r\n    result.coverImage = brandingSettings.image.bannerExternalUrl;\r\n\r\n    // result.channels = contentDetails.channels;\r\n\r\n    return result;\r\n};\r\n","const ranges = [\r\n    {\r\n        divider: 1e3,\r\n        suffix: 'K',\r\n    },\r\n    {\r\n        divider: 1e6,\r\n        suffix: 'M',\r\n    },\r\n    {\r\n        divider: 1e9,\r\n        suffix: 'B',\r\n    },\r\n];\r\n\r\nfunction intToString(input) {\r\n    for (let index = ranges.length - 1; index >= 0; index--) {\r\n        if (input > ranges[index].divider) {\r\n            let quotient = input / ranges[index].divider;\r\n\r\n            if (quotient < 10) {\r\n                quotient = Math.floor(quotient * 10) / 10;\r\n            } else {\r\n                quotient = Math.floor(quotient);\r\n            }\r\n\r\n            return quotient.toString() + ranges[index].suffix;\r\n        }\r\n    }\r\n\r\n    return input.toString();\r\n}\r\n\r\nexport default intToString;\r\n"],"names":["cx","classNames","channelId","useParams","useState","channel","setChannel","useEffect","channelService","res","className","style","backgroundImage","coverImage","src","thumbnail","alt","title","tick","width","height","customUrl","intToString","subscriberCount","type","get","axios","method","url","params","part","maxResults","id","key","data","items","snippet","statistics","brandingSettings","result","thumbnails","default","hiddenSubscriberCount","videoCount","viewCount","image","bannerExternalUrl","ranges","divider","suffix","input","index","length","quotient","Math","floor","toString"],"sourceRoot":""}